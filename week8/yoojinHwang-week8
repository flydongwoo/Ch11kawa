// 백준 1526 가장 큰 금민수

// 은민이는 4와 7을 좋아하고, 나머지 숫자는 싫어한다.
// 금민수는 어떤 수가 4와 7로만 이루어진 수를 말한다.
// N이 주어졌을 때, N보다 작거나 같은 금민수 중 가장 큰 것을 출력하는 프로그램

// 100 -> 77
// 75 -> 74
// 5 -> 4
// 474747 -> 474747

// 문제에서 알려준 예제는 다 정상적으로 결과가 출력되는데,
// 어떤 부분이 문제인지 실패라고 뜨네요... 찾아주세요ㅜㅜ


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

int main(void) {
    int N = 0, lenN = 0, testNum = 0, firstNum = 0, goldNum = 0, lastNum = 0;

    scanf("%d", &N);

    int tempN = N;
    while (tempN != 0) {
        lenN++;
        tempN /= 10;
    }
    lenN--;

    // 가장 앞자리의 숫자
    firstNum = N / pow(10, lenN);
    if (firstNum >= 7) {
        goldNum += 7 * pow(10, lenN);
    }
    else if (firstNum >= 4) {
        goldNum += 4 * pow(10, lenN);
    }

    // 나머지 뒷부분 숫자
    for (int i = lenN - 1; i >= 0; i--) {
        testNum = pow(10, i);
        lastNum = (N / testNum) % 10;
        if (lastNum >= 7 || lastNum < 4) {
            goldNum += 7 * pow(10, i);
        }
        else if (lastNum >= 4 && lastNum < 7) {
            goldNum += 4 * pow(10, i);
        }
    }

    printf("goldNum = %d\n", goldNum);
    return 0;
}


//------------------------------------------------------------

// 백준 1672 DNA 해독

// N개의 A, G, t, C로 구성되어 있는 염기서열
// 염기서열을 해독해야함 (표를 이용)

// 해독 방법
// 염기서열의 제일 끝 두자리의 염기를 A[n-1], A[n]이라고 함
// A[n-1]을 행으로 , A[n]을 열로 대응시켜 그 자리에 해당하는 하나의 염기를 바꿈
// 해당 방식을 반복

// AAGTCG
// AAGTCG -> AAGTT -> AAGT -> AAA -> AA -> A
// 최종적으로 해독한 염기는 A가 됨

// 입력으로 염기서열 길이 N, 염기서열 문자열
// 최종 염기를 출력


// 백준 예시 입출력은 실행이 되는데, 누가봐도 말도 안되는 알고리즘이라 그런지 실패가 뜨더라구요 ㅎㅎ
// 그래도 풀긴 풀엇슴

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int main(void) {
	int N = 0;
	char* Quest;
	scanf("%d", &N);
	
	Quest = (char*)malloc(sizeof(char) * N);
	scanf("%s", Quest);

	for (int i = N; i > 0; i--) {
		if ((Quest[i] == 'A' && Quest[i - 1] == 'A') || (Quest[i] == 'A' && Quest[i - 1] == 'C') ||
			(Quest[i] == 'G' && Quest[i - 1] == 'T') || (Quest[i] == 'C' && Quest[i - 1] == 'A') ||
			(Quest[i] == 'T' && Quest[i - 1] == 'G')) {
			Quest[i] = '\0';
			Quest[i - 1] = 'A';
		}
		else if ((Quest[i] == 'A' && Quest[i - 1] == 'T') || (Quest[i] == 'G' && Quest[i - 1] == 'G') ||
			(Quest[i] == 'C' && Quest[i - 1] == 'T') || (Quest[i] == 'T' && Quest[i - 1] == 'A') ||
			(Quest[i] == 'T' && Quest[i - 1] == 'C')) {
			Quest[i] = '\0';
			Quest[i - 1] = 'G';
		}
		else if ((Quest[i] == 'A' && Quest[i - 1] == 'G') || (Quest[i] == 'G' && Quest[i - 1] == 'G') ||
			(Quest[i] == 'C' && Quest[i - 1] == 'C')) {
			Quest[i] = '\0';
			Quest[i - 1] = 'C';
		}
		else if ((Quest[i] == 'G' && Quest[i - 1] == 'C') || (Quest[i] == 'C' && Quest[i - 1] == 'G') ||
			(Quest[i] == 'T' && Quest[i - 1] == 'T')) {
			Quest[i] = '\0';
			Quest[i - 1] = 'T';
		}
	}

	printf("%s\n", Quest);
	return 0;
}



//---------------------------------------------------------------------------------------------------------------
// 도비의 난독증 테스트
// 유진수
