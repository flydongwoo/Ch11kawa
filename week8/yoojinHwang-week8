// 백준 1526 가장 큰 금민수

// 은민이는 4와 7을 좋아하고, 나머지 숫자는 싫어한다.
// 금민수는 어떤 수가 4와 7로만 이루어진 수를 말한다.
// N이 주어졌을 때, N보다 작거나 같은 금민수 중 가장 큰 것을 출력하는 프로그램

// 100 -> 77
// 75 -> 74
// 5 -> 4
// 474747 -> 474747

// 문제에서 알려준 예제는 다 정상적으로 결과가 출력되는데,
// 어떤 부분이 문제인지 실패라고 뜨네요... 찾아주세요ㅜㅜ


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

int main(void) {
    int N = 0, lenN = 0, testNum = 0, firstNum = 0, goldNum = 0, lastNum = 0;

    scanf("%d", &N);

    int tempN = N;
    while (tempN != 0) {
        lenN++;
        tempN /= 10;
    }
    lenN--;

    // 가장 앞자리의 숫자
    firstNum = N / pow(10, lenN);
    if (firstNum >= 7) {
        goldNum += 7 * pow(10, lenN);
    }
    else if (firstNum >= 4) {
        goldNum += 4 * pow(10, lenN);
    }

    // 나머지 뒷부분 숫자
    for (int i = lenN - 1; i >= 0; i--) {
        testNum = pow(10, i);
        lastNum = (N / testNum) % 10;
        if (lastNum >= 7 || lastNum < 4) {
            goldNum += 7 * pow(10, i);
        }
        else if (lastNum >= 4 && lastNum < 7) {
            goldNum += 4 * pow(10, i);
        }
    }

    printf("goldNum = %d\n", goldNum);
    return 0;
}


//------------------------------------------------------------

// 백준 1672 DNA 해독
// 성공

// N개의 A, G, t, C로 구성되어 있는 염기서열
// 염기서열을 해독해야함 (표를 이용)

// 해독 방법
// 염기서열의 제일 끝 두자리의 염기를 A[n-1], A[n]이라고 함
// A[n-1]을 행으로 , A[n]을 열로 대응시켜 그 자리에 해당하는 하나의 염기를 바꿈
// 해당 방식을 반복

// AAGTCG
// AAGTCG -> AAGTT -> AAGT -> AAA -> AA -> A
// 최종적으로 해독한 염기는 A가 됨

// 입력으로 염기서열 길이 N, 염기서열 문자열
// 최종 염기를 출력

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int main(void) {
	int N = 0;
	char* Quest;
	scanf("%d", &N);

	Quest = (char*)malloc(sizeof(char) * N);
	scanf("%s", Quest);

	for (int i = N; i > 0; i--) {
		switch (Quest[i]) {
		case 'A':
			switch (Quest[i - 1]) {
			case 'A':
				Quest[i] = '\0';
				Quest[i - 1] = 'A';
				break;
			case 'G':
				Quest[i] = '\0';
				Quest[i - 1] = 'C';
				break;
			case 'C':
				Quest[i] = '\0';
				Quest[i - 1] = 'A';
				break;
			case 'T':
				Quest[i] = '\0';
				Quest[i - 1] = 'G';
				break;
			}
			break;
		case 'G':
			switch (Quest[i - 1]) {
			case 'A':
				Quest[i] = '\0';
				Quest[i - 1] = 'C';
				break;
			case 'G':
				Quest[i] = '\0';
				Quest[i - 1] = 'G';
				break;
			case 'C':
				Quest[i] = '\0';
				Quest[i - 1] = 'T';
				break;
			case 'T':
				Quest[i] = '\0';
				Quest[i - 1] = 'A';
				break;
			}
			break;
		case 'C':
			switch (Quest[i - 1]) {
			case 'A':
				Quest[i] = '\0';
				Quest[i - 1] = 'A';
				break;
			case 'G':
				Quest[i] = '\0';
				Quest[i - 1] = 'T';
				break;
			case 'C':
				Quest[i] = '\0';
				Quest[i - 1] = 'C';
				break;
			case 'T':
				Quest[i] = '\0';
				Quest[i - 1] = 'G';
				break;
			}
			break;
		case 'T':
			switch (Quest[i - 1]) {
			case 'A':
				Quest[i] = '\0';
				Quest[i - 1] = 'G';
				break;
			case 'G':
				Quest[i] = '\0';
				Quest[i - 1] = 'A';
				break;
			case 'C':
				Quest[i] = '\0';
				Quest[i - 1] = 'G';
				break;
			case 'T':
				Quest[i] = '\0';
				Quest[i - 1] = 'T';
				break;
			}
			break;
		}
	}

	printf("%s\n", Quest);
	return 0;
}



//---------------------------------------------------------------------------------------------------------------
// 백준 도비의 난독증 테스트

// 영어 단어 (대소문자 섞임)
// 사전순으로 어느 단어가 가장 앞서는지 맞추기

// 입력
// 정수 n : 주어지는 단어의 개수
// 각 줄에는 길이가 최대 20인 단어가 주어짐
// 대소문자 구분을 없앴을 때 똑같은 단어는 주어지지 않음
// 마지막 입력은 0

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main(void) {
    int n = 0;
    char words[1000][20] = { 0 };
    char forDobby[1000][20] = { 0 };
    char temp[20] = { 0 };

    int count = 0;
    while (1) {
        scanf("%d", &n);
        if (n == 0) 
            break;

        for (int i = 0; i < n; i++) {
            scanf("%s", words[i]);
        }

        strcpy(forDobby[count], words[0]);

        for (int i = 1; i < n; i++) {
            strcpy(temp, words[i]);

            for (int j = 0; temp[j]; j++)
                temp[j] = tolower(temp[j]);

            char tempDobby[20];
            strcpy(tempDobby, forDobby);

            for (int j = 0; tempDobby[j]; j++)
                tempDobby[j] = tolower(tempDobby[j]);

            if (strcmp(temp, tempDobby) < 0)
                strcpy(forDobby[count], words[i]);
        }
        count++;
    }

    for (int i = 0; i < count; i++)
        printf("%s\n", forDobby[i]);

    return 0;
}

// -------------------------------------------------------------------------------------------------------------
// 유진수
// 성공
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>

int main(void) {
	int N = 0, count = 0, testNum = 0;
	int* Numbers;
	bool YoojinNum = false;

	scanf("%d", &N);
	
	int tempN = N;
	while (tempN != 0) {
		count++;
		tempN /= 10;
	}

	Numbers = (int*)malloc(sizeof(int) * count);
	for (int i = 0; i < count; i++) {
		testNum = pow(10, count - i - 1);
		Numbers[i] = N / testNum;
		N %= testNum;
	}

	int k = 0;
	int mulFront = 1, mulBack = 1;
	while (k <= count) {
		if (count == 1)
			break;
		for (int j = 0; j <= k; j++) {
			mulFront *= Numbers[j];
		}
		for (int j = k + 1; j < count; j++) {
			mulBack *= Numbers[j];
		}
		if (mulFront == mulBack) {
			YoojinNum = true;
			break;
		}
		else YoojinNum = false;
		k++;
		mulFront = 1; mulBack = 1;
	}

	if (YoojinNum == true)
		printf("YES\n");
	else printf("NO\n");

	return 0;
}

	return 0;
}
